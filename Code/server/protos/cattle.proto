syntax = "proto3";

package cattle;

service CattleMonitoring{
    rpc cattleData (cattleRequest) returns (cattleResponse) {}
	rpc shedAirConditions (stream airRequest) returns (airResponse) {}
	rpc shedWaterConditions (stream waterRequest) returns (waterResponse) {}
}

message cattleRequest {
    sint32 tagId = 1;
}

message cattleResponse {
    sint32 tagId = 1;
    int32 age = 2;
    int32 weight = 3;
    string healthStatus = 4;
    string heatDetection = 5;
}

message airRequest {
    int32 temperature = 1;
	int32 humidity = 2;
	int32 ammonia = 3;
}

message airResponse {
    string airAlertMessage = 1;
    int32 avgTemperature = 2;
	int32 avgHumidity = 3;
	int32 avgAmmoniaLv = 4;
	
}

message waterRequest {
    int32 waterQuality = 1; 
    int32 waterQuantity = 2;
}

message waterResponse {
    string waterAlertMessage = 1;
    int32 avgWaterQuality = 2;
    int32 avgWaterQuantity = 3;
}

service GrazingMonitoring {
    rpc grazingTrends(stream trendRequest) returns (trendResponse) {}
    rpc grazingBlocklist (blockRequest) returns (blockResponse) {}
    rpc grazingLocation(stream location) returns (stream location) {}
}

message trendRequest {
    int32 grazingLocation = 1;
    int32 time = 2;
}

message trendResponse {
    string avoidLocations = 1;
    string safeLocations = 2;
}

message blockRequest {
    int32 tagId = 1;
}

message blockResponse {
    int32 tagId = 1;
    string loggedDate = 2;
    int32 timeoutLength = 3;
}

message location {
    string name = 1;
    string message = 2;
    int32 location = 3;
}


service DiaryMonitoring {
    rpc productionExemption (ExemptionRequest) returns (ExemptionResponse) {}
    rpc getDiaryOutput(stream DiaryRequest) returns (DiaryResponse) {}
    rpc getHistoricData(HistoricDataRequest) returns (stream HistoricDataResponse) {}
}

message ExemptionRequest{
    int32 exclude = 1;
}

message ExemptionResponse{
    string message = 1;
}

message DiaryRequest{
    sint32 milkOutput = 1;
    sint32 cattleWeight = 2;
}

//https://protobuf.dev/programming-guides/proto3/ using "repeated" field type to pass array from server to client
message DiaryResponse{
    sint32 totalMilkOutput = 1;
    sint32 totalCattleWeight = 2;
    repeated sint32  problematicMilkOutput = 3;
    repeated sint32  problematicCattleWeight = 4;
}

message HistoricDataRequest{
}

message HistoricDataResponse{
    sint32 month = 1;
    sint32 annualDiaryOutput = 2;
    sint32 annualCattleWeight = 3;
    sint32 individualMilkOutput = 4;
    sint32 daysGrazing = 5;
}
